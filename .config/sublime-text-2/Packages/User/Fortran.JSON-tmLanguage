{ "name": "Fortran",
  "scopeName": "source.fortran",
  "fileTypes": ["f90", "F90", "f95", "F95"],
  "patterns": [
  {"include": "#type-declaration"},
  {"include": "#expression"},
  {"include": "#intrinsic-io"},
  {"include": "#import"},
  {  "name": "keyword.control.fortran",
     "match": "\\b(?i:(if|then|else|do))\\b",
     "comment": "Control structure keywords"
  },
  {  "name": "keyword.other.fortran",
     "match": "\\b(?i:(end|function|subroutine|module|program|type|contains|pure|elemental|call|result))\\b"
  },
  {  "name": "keyword.other.fortran",
     "match": "&"
  },
  {  "name": "comment.line.exclamation.fortran",
     "begin": "!",
     "end": "$\n?"
  }
  ],
  "repository": {
    "expression": {
      "patterns": [
      {"include": "#operators"},
      {"include": "#numeric"},
      {"include": "#string"},
      {"include": "#intrinsic-function"},
      {  "match": "\\.(?i:(true|false))\\.",
         "name": "support.constant.logical.fortran"
      }
      ]
    },
    "intrinsic-function": {
      "patterns": [
      {  "name": "support.function.f95.fortran",
         "match": "\\b(?i:(abs|achar|acos|adjustl|adjustr|aimag|aint|all|allocated|anint|any|asin|associated|atan|atan2|bit_size|btest|ceiling|char|cmplx|conjg|cos|cosh|count|cshift|date_and_time|dble|digits|dim|dot_product|dprod|eoshift|epsilon|exp|exponent|floor|fraction|huge|iachar|iand|ibclr|ibits|ibset|ichar|ieor|index|int|ior|ishft|ishftc|kind|lbound|len|len_trim|lge|lgt|lle|llt|log|log10|logical|matmul|max|maxexponent|maxloc|maxval|merge|min|minexponent|minloc|minval|mod|modulo|mvbits|nearest|nint|not|pack|present|product|radix|random_number|random_seed|range|real|repeat|reshape|rrspacing|scale|scan|selected_int_kind|selected_real_kind|set_exponent|shape|sign|sin|sinh|size|spacing|spread|sqrt|sum|system_clock|tan|tanh|tiny|transfer|transpose|trim|ubound|unpack|verify))\\b"
      }
      ]
    },
    "intrinsic-io": {
      "patterns": [
      {  "begin": "\\b(?i:(backspace|close|endfile|format|inquire|open|print|read|rewind|write))",
         "beginCaptures": {
          "1": {"name": "support.function.io.fortran"}
         },
         "end": "$\n?",
         "patterns": [
         {  "begin": "\\(",
            "end": "\\)",
            "patterns": [
            {"include": "#intrinsic-io-specifier"},
            {"include": "#expression"}
            ]
         }
         ]
      },
      {  "match": "^\\s*(?i:(namelist))\\s+(/\\s*(?i:([a-z][a-z0-9_]*))\\s*/)\\s+",
         "captures": {
          "1": {"name": "support.function.namelist.fortran"},
          "2": {"name": "variable.parameter.namelist.fortran"}
         }
      }
      ]
    },
    "intrinsic-io-specifier": {
      "patterns": [
      {  "match": "\\b(?i:(access))\\s*(=)\\s*(\"(sequential|direct|undefined)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(action))\\s*(=)\\s*(\"(read|write|readwrite)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(advance|pad))\\s*(=)\\s*(\"(yes|no)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(blank))\\s*(=)\\s*(\"(null|zero)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(delim))\\s*(=)\\s*(\"(apostrophe|quote|none)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(fmt))\\s*(=)\\s*(\\*)",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(form))\\s*(=)\\s*(\"(formatted|unformatted|undefined)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(position))\\s*(=)\\s*(\"(asis|rewind|append)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(status))\\s*(=)\\s*(\"(old|new|unknown|replace|scratch|keep)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(direct|formatted|read|readwrite|sequential|unformatted|write))\\s*(=)\\s*(\"(yes|no|unknown)\")",
         "captures": {
          "1": {"name": "variable.language.io.fortran"},
          "3": {"name": "support.constant.io.fortran"}
         }
      },
      {  "match": "\\b(?i:(access|action|advance|blank|delim|direct|end|eor|err|exist|file|fmt|form|formatted|iolength|iostat|name|named|nml|nextrec|number|opened|pad|position|read|readwrite|rec|recl|sequential|size|status|unformatted|unit|write))\\s*(=)",
         "captures": {
          "1": {"name": "variable.language.io.fortran"}
         }
      }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {"name": "punctuation.definition.string.begin.fortran"}
      },
      "end": "\"",
      "endCaptures": {
        "0": {"name": "punctuation.definition.string.end.fortran"}
      },
      "name": "string.quoted.double.fortran",
      "patterns": [
      {"include": "#string-escaped"}
      ]
    },
    "string-escaped": {
      "patterns": [
      {  "name": "constant.character.escape.fortran",
         "match": "\\\\([\"n])"
      }
      ]
    },
    "numeric": {
      "patterns": [
      {  "name": "constant.numeric.fortran",
         "match": "\\b(\\d+(\\.\\d+)?([eE][-+]?\\d+)?)\\b"
      }
      ]
    },
    "operators": {
      "patterns": [
      {  "name": "keyword.operator.comparison.fortran",
         "match": "==|/=|>=|>|<|<="
      },
      {  "name": "keyword.operator.comparison.fortran",
         "match": "\\.(eq|ne|ge|gt|lt|le)\\."
      },
      {  "name": "keyword.operator.arithmetic.fortran",
         "match": "\\+|-|/|\\*"
      },
      {  "name": "keyword.operator.logical.fortran",
         "match": "\\.(not|and|or|eqv|neqv)\\."
      },
      {  "begin": "\\(/",
         "beginCaptures": {
          "0": {"name": "keyword.operator.array.begin.fortran"}
         },
         "end": "/\\)",
         "endCaptures": {
          "0": {"name": "keyword.operator.array.begin.fortran"}
         },
         "patterns": [
         {"include": "#expression"}
         ]
      }
      ]
    },
    "type-declaration": {
      "patterns": [
      {  "begin": "^\\s*(?=.*::)",
         "end": "(::)",
         "patterns": [
         {"include": "#type"}
         ]
      }
      ]
    },
    "type": {
      "patterns": [
      {  "name": "storage.type.basic.fortran",
         "match": "\\b(?i:(integer|real|complex|logical))\\b"
      },
      {  "match": "\\b(?i:(character))(\\s*\\(\\s*(?i:(len))\\s*(=)\\s*(\\d+)\\s*\\))?",
         "captures": {
          "1": {"name": "storage.type.basic.fortran"},
          "3": {"name": "storage.modifier.length.fortran"},
          "5": {"name": "constant.numeric.fortran"}
         }
      },
      {  "match": "\\b(?i:(type))\\s*\\(\\s*(?i:([a-z][a-z0-9_]*))\\)",
         "captures": {
          "1": {"name": "storage.type.derived.fortran"}
         }
      },
      {  "begin": "\\b(?i:(intent))\\s*\\(",
         "beginCaptures": {
          "1": {"name": "storage.modifier.intent.fortran"}
         },
         "end": "\\s*\\)", 
         "patterns": [
         {  "match": "\\b(in|out|inout)\\b",
            "name": "support.constant.intent.fortran"
         },
         {  "match": ".*?",
            "name": "invalid.illegal.intent.fortran"
         }
         ]
      },
      {  "begin": "\\b(?i:(dimension))\\s*\\(",
         "beginCaptures": {
          "1": {"name": "storage.modifier.dimension.fortran"}
         },
         "end": "\\s*\\)",
         "patterns": [
         {"include": "#expression"}
         ]
      },
      {  "name": "storage.modifier.fortran",
         "match": "\\b(?i:(allocatable|external|intrinsic|optional|parameter|pointer|private|public|save|target))\\b"
      }
      ]
    },
    "import": {
      "patterns": [
      {  "begin": "(?i:((use)\\s+([a-z][a-z0-9_]*)))",
         "beginCaptures": {
          "2": {"name": "keyword.other.import.use.fortran"}
         },
         "end": "(\\s*,\\s*(?i:(only))\\s*:|)",
         "endCaptures": {
          "1": {"name": "keyword.other.import.only.fortran"}
         }
      },
      {  "name": "keyword.other.import.as.fortran",
         "match": "=>"
      }
      ]
    }
  },
  "uuid": "5f620bf4-f3df-44d3-976c-e3dcca74bc5f"
}